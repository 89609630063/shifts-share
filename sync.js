const API_URL = "https://shift-schedule-server-production.up.railway.app/api/shifts"; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API

// üîÑ –§—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–º–µ–Ω —Å —Å–µ—Ä–≤–µ—Ä–æ–º
function syncShiftsWithServer() {
    console.log("üì° –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–º–µ–Ω —Å —Å–µ—Ä–≤–µ—Ä–æ–º...");
    
    if (!shifts.length) {
        console.warn("‚ö†Ô∏è –ù–µ—Ç —Å–º–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏!");
        return;
    }

    fetch(API_URL, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(shifts) // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –º–∞—Å—Å–∏–≤ —Å–º–µ–Ω
    })
    .then(response => response.json())
    .then(data => console.log("‚úÖ –°–º–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã:", data))
    .catch(error => console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–º–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä:", error));
}

// ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–º–µ–Ω—ã
function addShift(name, date, startTime, shiftType) {
    if (!name || !date || !startTime || !shiftType) {
        alert("‚ö†Ô∏è –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!");
        return;
    }

    const newShift = {
        id: Date.now(),
        name,
        date,
        startTime,
        shiftType,
        remindBefore: 30,
        isDone: false
    };

    shifts.push(newShift);
    saveShiftsToLocalStorage();
    syncShiftsWithServer(); // üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä

    console.log("‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Å–º–µ–Ω–∞:", newShift);
}

// üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å–º–µ–Ω—ã
function deleteShift(id) {
    shifts = shifts.filter(shift => shift.id !== id);
    saveShiftsToLocalStorage();
    syncShiftsWithServer(); // üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä

    console.log("‚ùå –£–¥–∞–ª–µ–Ω–∞ —Å–º–µ–Ω–∞ —Å ID:", id);
}

// ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–º–µ–Ω—ã
function editShift(id, newName, newDate, newStartTime, newShiftType) {
    let shift = shifts.find(shift => shift.id === id);
    if (!shift) {
        console.warn("‚ö†Ô∏è –°–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
        return;
    }

    shift.name = newName || shift.name;
    shift.date = newDate || shift.date;
    shift.startTime = newStartTime || shift.startTime;
    shift.shiftType = newShiftType || shift.shiftType;

    saveShiftsToLocalStorage();
    syncShiftsWithServer(); // üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä

    console.log("‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å–º–µ–Ω–∞:", shift);
}

// üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–º–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
function saveShiftsToLocalStorage() {
    localStorage.setItem("shifts", JSON.stringify(shifts));
    console.log("üíæ –°–º–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ LocalStorage");
}

// üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–º–µ–Ω –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
function loadShiftsFromLocalStorage() {
    const storedShifts = localStorage.getItem("shifts");
    if (storedShifts) {
        shifts = JSON.parse(storedShifts);
        console.log("üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å–º–µ–Ω—ã –∏–∑ LocalStorage:", shifts);
    } else {
        shifts = [];
    }
}

// ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–º–µ–Ω—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener("DOMContentLoaded", () => {
    loadShiftsFromLocalStorage();
    syncShiftsWithServer(); // üöÄ –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ä–∞–∑—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º
});